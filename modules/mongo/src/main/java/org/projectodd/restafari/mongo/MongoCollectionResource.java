package org.projectodd.restafari.mongo;

import com.mongodb.*;
import com.mongodb.util.JSON;
import org.bson.types.ObjectId;
import org.projectodd.restafari.spi.*;
import org.projectodd.restafari.spi.resource.Resource;
import org.projectodd.restafari.spi.resource.async.CollectionResource;
import org.projectodd.restafari.spi.resource.async.ResourceSink;
import org.projectodd.restafari.spi.resource.async.Responder;
import org.projectodd.restafari.spi.state.CollectionResourceState;
import org.projectodd.restafari.spi.state.ObjectResourceState;
import org.projectodd.restafari.spi.state.PropertyResourceState;
import org.projectodd.restafari.spi.state.ResourceState;

import java.net.URI;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

/**
 * @author Bob McWhirter
 */
class MongoCollectionResource extends MongoResource implements CollectionResource {

    String collectionName;

    MongoCollectionResource(MongoResource parent, String collectionName) {
        super(parent, collectionName);
        this.collectionName = collectionName;
    }

    @Override
    public void read(RequestContext ctx, String id, Responder responder) {

        DBObject dbObject = null;
        // check if its a mongo autogenerated id
        if (ObjectId.isValid(id)) {
            dbObject = this.parent.getDB().getCollection(this.collectionName).findOne(new BasicDBObject(MONGO_ID_FIELD, new ObjectId(id)));
        }

        // if its not a mongo autogenerated id, then check using just the id string
        if (dbObject == null) {
            dbObject = this.parent.getDB().getCollection(this.collectionName).findOne(new BasicDBObject(MONGO_ID_FIELD, id));
        }

        if (dbObject == null) {
            responder.noSuchResource(id);
            return;
        }

        responder.resourceRead(new MongoObjectResource(this, dbObject));
    }

    @Override
    public void delete(RequestContext ctx, Responder responder) {
        if (getDB().collectionExists(this.collectionName)) {
            getDB().getCollection(this.collectionName).drop();
            responder.resourceDeleted(this);
        } else {
            responder.noSuchResource(this.collectionName);
        }
    }

    @Override
    public void readContent(RequestContext ctx, ResourceSink sink) {
        DBCollection c = this.parent.getDB().getCollection(this.collectionName);
        ResourceParams params = ctx.getResourceParams();
        DBCursor cursor;
        if (params != null && params.contains("q")) {
            String q = params.value("q");
            cursor = c.find((DBObject) JSON.parse(q));
        } else {
            cursor = c.find();
        }
        cursor.forEach((e) -> {
            sink.accept(new MongoObjectResource(this, e));
        });

        try {
            sink.close();
        } catch (Exception e) {
            e.printStackTrace();  //TODO: properly handle errors
        }
    }

    @Override
    public void create(RequestContext ctx, ResourceState state, Responder responder) {
        DBCollection dbCollection = this.parent.getDB().getCollection(this.id);

        BasicDBObject basicDBObject = null;
        try {
            basicDBObject = (BasicDBObject) createObject(state);
            dbCollection.insert(basicDBObject);
        } catch (Exception e) {
            e.printStackTrace();
        }

        responder.resourceCreated(new MongoObjectResource(this, basicDBObject));
    }

    public String toString() {
        return "[MongoCollectionResource: id=" + this.collectionName + "]";
    }

    protected Object createObject(ResourceState resourceState) {
        if (resourceState instanceof PropertyResourceState) {
            PropertyResourceState pRS = (PropertyResourceState) resourceState;
            if (pRS.value() instanceof ResourceState) {
                return createObject((ResourceState) pRS.value());
            } else {
                return pRS.value();
            }
        } else {
            BasicDBObject basicDBObject = new BasicDBObject();
            // if the state already has an id set, use it here. Otherwise one will be autocreated on insert
            String rid = resourceState.id();
            if (rid != null) {
                basicDBObject.append(MONGO_ID_FIELD, rid);
            }

            if (resourceState instanceof CollectionResourceState) {
                CollectionResourceState collectionResourceState = (CollectionResourceState) resourceState;
                List<? extends ResourceState> resourceStates = collectionResourceState.members().collect(Collectors.toList());
                ArrayList resourceList = new ArrayList();
                for (ResourceState state : resourceStates) {
                    if (state.id()== null || !state.id().equals(MBAAS_ID_FIELD)) { //don't append the ID field again
                        resourceList.add(createObject(state));
                    }
                }

                return resourceList;
            } else if (resourceState instanceof ObjectResourceState) {
                ObjectResourceState objectResourceState = (ObjectResourceState) resourceState;
                List<? extends PropertyResourceState> resourceStates = objectResourceState.members().collect(Collectors.toList());
                for (PropertyResourceState pRS : resourceStates) {
                    if (pRS.id()== null || !pRS.id().equals(MBAAS_ID_FIELD)) { //don't append the ID field again
                        basicDBObject.append(pRS.id(), createObject(pRS));
                    }
                }
            } else {
                System.out.println("UNKNOWN RESOURCESTATE TYPE : " + resourceState.getClass());
            }
            return basicDBObject;
        }
    }

    @Override
    public java.net.URI uri() {
        List<String> segments = new ArrayList<>();
        Resource current = this;

        //current = current.parent();

        if (parent instanceof MongoPropertyResource)
        {
            current = current.parent();
        }

        while (current != null) {
            segments.add(0, current.id());
            current = current.parent();
        }

        StringBuilder buf = new StringBuilder();

        segments.forEach((s) -> {
            buf.append( "/" );
            buf.append( s );
        });

        return URI.create(buf.toString());
    }

}
